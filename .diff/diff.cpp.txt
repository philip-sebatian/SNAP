+0}*/
+0    }
+0        std::cout<<j.letter<<"\n";
+0    for(auto j :i){
+0    auto i = reconstruct_delta_file("delta3.txt");
+0    //create_change(i);
+0   //auto i = get_fs("file.txt");
+0   //write_fs_delta("file.txt");
+0   //write_delta_from_file_name("he;lo.txt","new.txt","delta3.txt");
+0{
+0/*int main()
+0}
+0
+0    }
+0        }
+0            
+0                fs::remove_all(fs::current_path()/i);
+0                std::cout<<"remove "<<i<<"\n";
+0        if(file_s.find(i)==file_s.end()){
+0        std::cout<<"conetnt B "<<i<<"\n";
+0    for(const auto &i : c_flst){
+0
+0    }
+0        }
+0            }
+0                }
+0                    fs::create_directories(fs::current_path() / i);
+0                    std::cout<<"add "<<i<<"\n";
+0                if(!fs::exists(fs::current_path()/i)){
+0            if(fs::is_directory(fs::current_path()/i)){
+0        if(c_flst.find(i)==c_flst.end()){
+0        std::cout<<"contents "<<i<<"\n";
+0    for(const auto &i :file_s){
+0    traverse(fs::current_path(),c_flst);
+0    std::set<fs::path> c_flst;
+0void create_change(std::set<fs::path> file_s){
+0
+0}
+0    write_delta_from_actionstk(delta,ssk);
+0    std::deque<actions> ssk=get_actions(dp,lines1,lines2);
+0    }
+0        return;
+0    if(dp[lines1.size()][lines2.size()]==0){
+0    std::vector<std::vector<int>> dp =calc(lines1,lines2);
+0    lines2=get_content(f2);
+0    lines1=get_content(f1);
+0    std::vector<std::string> lines2;
+0    std::vector<std::string> lines1;
+0void write_delta_from_file_name(std::string f1,std::string f2,std::string delta){
+0}
+0    std::cout<<"finished writing"<<std::endl;
+0    ff.close();
+0    }
+0        ff<<str;
+0        stk.pop_front();
+0        str=stk.front().action+std::to_string(stk.front().idx)+stk.front().letter+"\n";
+0    while(!stk.empty()){
+0    
+0    std::string str ;
+0    ff.open(fname,std::ios::out|std::ios::trunc);
+0    std:: fstream ff ;
+0    
+0    std::set<std::filesystem::path> filestruct ;
+0void write_delta_from_actionstk(std::string fname,std::deque<actions>stk){
+0//takes in the action dequeue and writes delta file with the name passed in the parameter fname
+0}
+0    ff.seekg(0);
+0    ff<<fss;
+0    std::string str ;
+0    ff.open(delta,std::ios::out|std::ios::trunc);
+0    std:: fstream ff ;
+0    fss+="\n";
+0    }
+0        fss+=","+i.string();
+0    for(auto i :filestruct){
+0    std::string fss="$";
+0    traverse(std::filesystem::current_path(),filestruct);
+0    std::set<std::filesystem::path> filestruct ;
+0void write_fs_delta(std::string delta){
+0}
+0   return stk;
+0   }
+0        stk.push_back(actions(temp_line,idx-'0',action));
+0        
+0        idx=str[1];
+0        action=str[0];
+0        temp_line=str.substr(2);
+0    while(getline(ff,str)){
+0    
+0    std::string action;
+0    int idx;
+0    std::string temp_line;
+0    std::string str ;
+0    ff.open(fname,std::ios::out|std::ios::in);
+0    std:: fstream ff ;
+0    std::deque<actions> stk;
+0std::deque<actions> reconstruct_delta_file(std::string fname){
+0}
+0
+0    return tokens;
+0    }
+0        tokens.insert(fs::path(token));
+0    while (std::getline(iss, token, ',')) {
+0    std::string token;
+0    std::istringstream iss(str);
+0    std::set<fs::path> tokens;
+0    std::string str =strbuffer.substr(2);
+0    getline(ff,strbuffer);
+0    std::string strbuffer;
+0    ff.open(delta,std::ios::out|std::ios::in);
+0    std:: fstream ff ;
+0std::set<fs::path> get_fs(std::string delta){
+0//recontructs the the action deque from the delta file with name equals fname 
+0}
+0    return file_content;
+0    file_content=temp;
+0    }
+0        temp.push_back(file_content[i]);
+0        }
+0            continue;
+0        if(i==idx){
+0    for(int i =0 ; i < file_content.size();i++){
+0    std::vector<std::string> temp;
+0std::vector<std::string> delete_line(std::vector<std::string>&file_content,int idx){
+0//deltes line from content vector 
+0}
+0    return file_content;
+0    file_content=temp;
+0    }
+0        temp.push_back(s1); 
+0    if (!flg) {
+0    }
+0        temp.push_back(file_content[i]);
+0        }
+0            
+0            
+0                }
+0                
+0                flg=true;
+0                
+0                temp.push_back(s1);
+0            if(!flg){
+0            
+0        if(i==idx){
+0    for(int i =0 ; i < file_content.size();i++){
+0    bool flg=false;
+0    std::vector<std::string> temp;
+0std::vector<std::string> add_line(std::vector<std::string>&file_content,std::string s1,int idx){
+0//adds line from content vector
+0}
+0
+0   return lines;
+0   }
+0        lines.push_back(str);
+0        std::cout<<str<<std::endl;
+0    
+0    while(getline(ff,str)){
+0    std::vector <std::string>lines;
+0    std::string str ;
+0    ff.open(fname,std::ios::out|std::ios::in);
+0    std:: fstream ff ;
+0std::vector<std::string> get_content(std::string fname){
+0//gets the content of the files of a file as array of strings
+0
+0
+0}
+0    return stk;
+0    }
+0        j--;
+0        stk.push_back(actions(s2[j-1],i,"+"));
+0    while(j>0){
+0    }
+0        i--;
+0        stk.push_back(actions(s1[i-1],i-1,"-"));
+0    while(i>0){
+0    }
+0        
+0        }
+0            j--;
+0            stk.push_back(actions(s2[j-1],i,"+"));
+0        else{
+0        }
+0            i--;
+0            stk.push_back(actions(s1[i-1],i-1,"-"));
+0            
+0        else if(dp[i-1][j]+1==dp[i][j]){
+0        }
+0            j--;
+0            i--;
+0        if(s1[i-1]==s2[j-1]){
+0    while(i>0 && j>0){
+0    int j =s2.size();
+0    int i =s1.size();
+0    std::deque<actions> stk;
+0std::deque<actions> get_actions(std::vector<std::vector<int>>&dp,std::vector<std::string> &s1,std::vector<std::string> &s2){
+0//s1 is the line that is to be changed and s2 is the line that is to be searched to 
+0//gets the actions needed to be performed
+0
+0
+0}
+0    
+0
+0
+0    return dp;
+0    }
+0        std::cout<<std::endl;
+0        }
+0            std::cout<<dp[i][j]<<"\t";
+0        for(int j=0 ; j<s2.size()+1;j++){
+0    for(int i=0 ; i<s1.size()+1;i++){
+0
+0
+0    }
+0        }
+0            }
+0                dp[i][j]=std::min(dp[i-1][j],dp[i][j-1])+1;
+0            else{
+0            }
+0                dp[i][j]=dp[i-1][j-1];
+0            if(s1[i-1]==s2[j-1]){
+0        for(int j =1 ; j < s2.size()+1;j++){
+0    for(int i =1 ; i<s1.size()+1;i++){
+0
+0    }
+0        dp[0][i]=i;
+0    for(int i =0 ; i<s2.size()+1;i++){
+0    }
+0        dp[i][0]=i;
+0    for(int i=0 ; i < s1.size()+1;i++){
+0    std::vector<std::vector<int>>dp(s1.size()+1,std::vector<int>(s2.size()+1,0));
+0std::vector<std::vector<int>> calc(std::vector<std::string> s1,std::vector <std::string> s2){
+0//calculates the dp for diff
+0std::vector<std::string> delete_line(std::vector<std::string>&,int);
+0std::vector<std::string> add_line(std::vector<std::string>&,std::string ,int );
+0
+0//deque to store the actions
+0
+0};
+0        }
+0            this->action=action;
+0            this->idx=idx;
+0            this->letter=letter;
+0        actions(std::string letter,int idx,std::string action){
+0    std::string action;
+0    int idx ;
+0    std::string letter ;
+0    public:
+0    
+0class actions{
+0
+0namespace fs = std::filesystem;
+0//class for the actions
+0#include "file.cpp"
+0#include <fstream>
+0#include<bits/stdc++.h>
